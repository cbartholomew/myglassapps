{"protocol": "rest", "labels": ["limited_availability"], "ownerName": "Google", "batchPath": "batch", "id": "mirror:v1", "schemas": {"UserAction": {"properties": {"type": {"type": "string", "description": "The type of action. The value of this can be:  \n- SHARE - the user shared an item. \n- REPLY - the user replied to an item. \n- REPLY_ALL - the user replied to all recipients of an item. \n- CUSTOM - the user selected a custom menu item on the timeline item. \n- DELETE - the user deleted the item. \n- PIN - the user pinned the item. \n- UNPIN - the user unpinned the item.  In the future, additional types may be added. UserActions with unrecognized types should be ignored."}, "payload": {"type": "string", "description": "An optional payload for the action.\n\nFor actions of type CUSTOM, this is the ID of the custom menu item that was selected."}}, "type": "object", "id": "UserAction", "description": "Represents an action taken by the user that triggered a notification."}, "ContactsListResponse": {"properties": {"items": {"items": {"$ref": "Contact"}, "type": "array", "description": "Contact list."}, "kind": {"default": "mirror#contacts", "type": "string", "description": "The type of resource. This is always mirror#contacts."}}, "type": "object", "id": "ContactsListResponse", "description": "A list of Contacts representing contacts. This is the response from the server to GET requests on the contacts collection."}, "AttachmentsListResponse": {"properties": {"items": {"items": {"$ref": "Attachment"}, "type": "array", "description": "The list of attachments."}, "kind": {"default": "mirror#attachmentsList", "type": "string", "description": "The type of resource. This is always mirror#attachmentsList."}}, "type": "object", "id": "AttachmentsListResponse", "description": "A list of Attachments. This is the response from the server to GET requests on the attachments collection."}, "Notification": {"properties": {"itemId": {"type": "string", "description": "The ID of the item that generated the notification."}, "collection": {"type": "string", "description": "The collection that generated the notification."}, "verifyToken": {"type": "string", "description": "The secret verify token provided by the service when it subscribed for notifications."}, "userToken": {"type": "string", "description": "The user token provided by the service when it subscribed for notifications."}, "userActions": {"items": {"$ref": "UserAction"}, "type": "array", "description": "A list of actions taken by the user that triggered the notification."}, "operation": {"type": "string", "description": "The type of operation that generated the notification."}}, "type": "object", "id": "Notification", "description": "A notification delivered by the API."}, "TimelineListResponse": {"properties": {"nextPageToken": {"type": "string", "description": "The next page token. Provide this as the pageToken parameter in the request to retrieve the next page of results."}, "items": {"items": {"$ref": "TimelineItem"}, "type": "array", "description": "Items in the timeline."}, "kind": {"default": "mirror#timeline", "type": "string", "description": "The type of resource. This is always mirror#timeline."}}, "type": "object", "id": "TimelineListResponse", "description": "A list of timeline items. This is the response from the server to GET requests on the timeline collection."}, "NotificationConfig": {"properties": {"level": {"type": "string", "description": "Describes how important the notification is. Allowed values are:  \n- DEFAULT - Notifications of default importance. A chime will be played to alert users."}, "deliveryTime": {"type": "string", "description": "The time at which the notification should be delivered.", "format": "date-time"}}, "type": "object", "id": "NotificationConfig", "description": "Controls how notifications for a timeline item are presented to the user."}, "TimelineItem": {"properties": {"attachments": {"items": {"$ref": "Attachment"}, "type": "array", "description": "A list of media attachments associated with this item."}, "displayTime": {"type": "string", "description": "The time that should be displayed when this item is viewed in the timeline, formatted according to RFC 3339. This user's timeline is sorted chronologically on display time, so this will also determine where the item is displayed in the timeline. If not set by the service, the display time defaults to the updated time.", "format": "date-time"}, "creator": {"$ref": "Contact", "description": "The user or group that created this item."}, "text": {"type": "string", "description": "Text content of this item."}, "menuItems": {"items": {"$ref": "MenuItem"}, "type": "array", "description": "A list of menu items that will be presented to the user when this item is selected in the timeline."}, "isBundleCover": {"type": "boolean", "description": "Whether this item is a bundle cover.\n\nIf an item is marked as a bundle cover, it will be the entry point to the bundle of items that have the same bundleId as that item. It will be shown only on the main timeline \u2014 not within the opened bundle.\n\nOn the main timeline, items that are shown are:  \n- Items that have isBundleCover set to true  \n- Items that do not have a bundleId  In a bundle sub-timeline, items that are shown are:  \n- Items that have the bundleId in question AND isBundleCover set to false"}, "etag": {"type": "string", "description": "ETag for this item."}, "id": {"type": "string", "description": "The ID of the timeline item. This is unique within a user's timeline."}, "isDeleted": {"type": "boolean", "description": "When true, indicates this item is deleted, and only the ID property is set."}, "bundleId": {"type": "string", "description": "The bundle ID for this item. Services can specify a bundleId to group many items together. They appear under a single top-level item on the device."}, "isPinned": {"type": "boolean", "description": "When true, indicates this item is pinned, which means it's grouped alongside \"active\" items like navigation and hangouts, on the opposite side of the home screen from historical (non-pinned) timeline items."}, "title": {"type": "string", "description": "The title of this item."}, "notification": {"$ref": "NotificationConfig", "description": "Controls how notifications for this item are presented on the device. If this is missing, no notification will be generated."}, "speakableText": {"type": "string", "description": "The speakable version of the content of this item. Along with the READ_ALOUD menu item, use this field to provide text that would be clearer when read aloud, or to provide extended information to what is displayed visually on Glass."}, "html": {"type": "string", "description": "HTML content for this item. If both text and html are provided for an item, the html will be rendered in the timeline."}, "location": {"$ref": "Location", "description": "The geographic location associated with this item."}, "sourceItemId": {"type": "string", "description": "Opaque string you can use to map a timeline item to data in your own service."}, "inReplyTo": {"type": "string", "description": "If this item was generated as a reply to another item, this field will be set to the ID of the item being replied to. This can be used to attach a reply to the appropriate conversation or post."}, "updated": {"type": "string", "description": "The time at which this item was last modified, formatted according to RFC 3339.", "format": "date-time"}, "canonicalUrl": {"type": "string", "description": "A canonical URL pointing to the canonical/high quality version of the data represented by the timeline item."}, "recipients": {"items": {"$ref": "Contact"}, "type": "array", "description": "A list of users or groups that this item has been shared with."}, "kind": {"default": "mirror#timelineItem", "type": "string", "description": "The type of resource. This is always mirror#timelineItem."}, "created": {"type": "string", "description": "The time at which this item was created, formatted according to RFC 3339.", "format": "date-time"}, "htmlPages": {"items": {"type": "string"}, "type": "array", "description": "Additional pages of HTML content associated with this item. If this field is specified, the item will be displayed as a bundle, with the html field as the cover. It is an error to specify this field without specifying the html field."}, "pinScore": {"type": "integer", "description": "For pinned items, this determines the order in which the item is displayed in the timeline, with a higher score appearing closer to the clock. Note: setting this field is currently not supported.", "format": "int32"}, "selfLink": {"type": "string", "description": "A URL that can be used to retrieve this item."}}, "type": "object", "id": "TimelineItem", "description": "Each item in the user's timeline is represented as a TimelineItem JSON structure, described below."}, "Contact": {"properties": {"kind": {"default": "mirror#contact", "type": "string", "description": "The type of resource. This is always mirror#contact."}, "displayName": {"type": "string", "description": "The name to display for this contact.", "annotations": {"required": ["mirror.contacts.insert", "mirror.contacts.update"]}}, "acceptTypes": {"items": {"type": "string"}, "type": "array", "description": "A list of MIME types that a contact supports. The contact will be shown to the user if any of its acceptTypes matches any of the types of the attachments on the item. If no acceptTypes are given, the contact will be shown for all items."}, "type": {"type": "string", "description": "The type for this contact. This is used for sorting in UIs. Allowed values are:  \n- INDIVIDUAL - Represents a single person. This is the default. \n- GROUP - Represents more than a single person."}, "priority": {"type": "integer", "description": "Priority for the contact to determine ordering in a list of contacts. Contacts with higher priorities will be shown before ones with lower priorities.", "format": "uint32"}, "source": {"type": "string", "description": "The ID of the application that created this contact. This is populated by the API"}, "phoneNumber": {"type": "string", "description": "Primary phone number for the contact. This can be a fully-qualified number, with country calling code and area code, or a local number."}, "imageUrls": {"items": {"type": "string"}, "type": "array", "description": "Set of image URLs to display for a contact. Most contacts will have a single image, but a \"group\" contact may include up to 8 image URLs and they will be resized and cropped into a mosaic on the client.", "annotations": {"required": ["mirror.contacts.insert", "mirror.contacts.update"]}}, "id": {"type": "string", "description": "An ID for this contact. This is generated by the application and is treated as an opaque token.", "annotations": {"required": ["mirror.contacts.insert", "mirror.contacts.update"]}}}, "type": "object", "id": "Contact", "description": "A person or group that can be used as a creator or a contact."}, "LocationsListResponse": {"properties": {"items": {"items": {"$ref": "Location"}, "type": "array", "description": "The list of locations."}, "kind": {"default": "mirror#locationsList", "type": "string", "description": "The type of resource. This is always mirror#locationsList."}}, "type": "object", "id": "LocationsListResponse", "description": "A list of Locations. This is the response from the server to GET requests on the locations collection."}, "Attachment": {"properties": {"contentUrl": {"type": "string", "description": "The URL for the content."}, "contentType": {"type": "string", "description": "The MIME type of the attachment."}, "id": {"type": "string", "description": "The ID of the attachment."}, "isProcessingContent": {"type": "boolean", "description": "Indicates that the contentUrl is not available because the attachment content is still being processed. If the caller wishes to retrieve the content, it should try again later."}}, "type": "object", "id": "Attachment", "description": "Represents media content, such as a photo, that can be attached to a timeline item."}, "SubscriptionsListResponse": {"properties": {"items": {"items": {"$ref": "Subscription"}, "type": "array", "description": "The list of subscriptions."}, "kind": {"default": "mirror#subscriptionsList", "type": "string", "description": "The type of resource. This is always mirror#subscriptionsList."}}, "type": "object", "id": "SubscriptionsListResponse", "description": "A list of Subscriptions. This is the response from the server to GET requests on the subscription collection."}, "MenuItem": {"properties": {"action": {"type": "string", "description": "Controls the behavior when the user picks the menu option. Allowed values are:  \n- CUSTOM - Custom action set by the service. When the user selects this menuItem, the API triggers a notification to your callbackUrl with the userActions.type set to CUSTOM and the userActions.payload set to the ID of this menu item. This is the default value. \n- Built-in actions:  \n- REPLY - Initiate a reply to the timeline item using the voice recording UI. The creator attribute must be set in the timeline item for this menu to be available. \n- REPLY_ALL - Same behavior as REPLY. The original timeline item's recipients will be added to the reply item. \n- DELETE - Delete the timeline item. \n- SHARE - Share the timeline item with the available contacts. \n- READ_ALOUD - Read the timeline item's speakableText aloud; if this field is not set, read the text field; if none of those fields are set, this menu item is ignored.  \n- VOICE_CALL - Initiate a phone call using the timeline item's creator.phone_number attribute as recipient. \n- NAVIGATE - Navigate to the timeline item's location. \n- TOGGLE_PINNED - Toggle the isPinned state of the timeline item."}, "removeWhenSelected": {"type": "boolean", "description": "If set to true on a CUSTOM menu item, that item will be removed from the menu after it is selected."}, "values": {"items": {"$ref": "MenuValue"}, "type": "array", "description": "For CUSTOM items, a list of values controlling the appearance of the menu item in each of its states. A value for the DEFAULT state must be provided. If the PENDING or CONFIRMED states are missing, they will not be shown."}, "id": {"type": "string", "description": "The ID for this menu item. This is generated by the application and is treated as an opaque token."}}, "type": "object", "id": "MenuItem", "description": "A custom menu item that can be presented to the user by a timeline item."}, "Subscription": {"properties": {"kind": {"default": "mirror#subscription", "type": "string", "description": "The type of resource. This is always mirror#subscription."}, "notification": {"$ref": "Notification", "description": "Container object for notifications. This is not populated in the Subscription resource."}, "updated": {"type": "string", "description": "The time at which this subscription was last modified, formatted according to RFC 3339.", "format": "date-time"}, "collection": {"type": "string", "description": "The collection to subscribe to. Allowed values are:  \n- timeline - Changes in the timeline including insertion, deletion, and updates. \n- locations - Location updates.", "annotations": {"required": ["mirror.subscriptions.insert", "mirror.subscriptions.update"]}}, "verifyToken": {"type": "string", "description": "A secret token sent to the subscriber in notifications so that it can verify that the notification was generated by Google."}, "userToken": {"type": "string", "description": "An opaque token sent to the subscriber in notifications so that it can determine the ID of the user."}, "operation": {"items": {"type": "string"}, "type": "array", "description": "A list of operations that should be subscribed to. An empty list indicates that all operations on the collection should be subscribed to. Allowed values are:  \n- UPDATE - The item has been updated. \n- INSERT - A new item has been inserted. \n- DELETE - The item has been deleted. \n- MENU_ACTION - A custom menu item has been triggered by the user."}, "id": {"type": "string", "description": "The ID of the subscription."}, "callbackUrl": {"type": "string", "description": "The URL where notifications should be delivered (must start with https://).", "annotations": {"required": ["mirror.subscriptions.insert", "mirror.subscriptions.update"]}}}, "type": "object", "id": "Subscription", "description": "A subscription to events on a collection."}, "MenuValue": {"properties": {"iconUrl": {"type": "string", "description": "URL of an icon to display with the menu item."}, "state": {"type": "string", "description": "The state that this value applies to. Allowed values are:  \n- DEFAULT - Default value shown when displayed in the menuItems list. \n- PENDING - Value shown when the menuItem has been selected by the user but can still be cancelled. \n- CONFIRMED - Value shown when the menuItem has been selected by the user and can no longer be cancelled."}, "displayName": {"type": "string", "description": "The name to display for the menu item."}}, "type": "object", "id": "MenuValue", "description": "A single value that is part of a MenuItem."}, "Location": {"properties": {"kind": {"default": "mirror#location", "type": "string", "description": "The type of resource. This is always mirror#location."}, "displayName": {"type": "string", "description": "The name to be displayed. This may be a business name or a user-defined place, such as \"Home\"."}, "timestamp": {"type": "string", "description": "The time at which this location was captured, formatted according to RFC 3339.", "format": "date-time"}, "longitude": {"type": "number", "description": "The longitude, in degrees.", "format": "double"}, "address": {"type": "string", "description": "The full address of the location."}, "latitude": {"type": "number", "description": "The latitude, in degrees.", "format": "double"}, "id": {"type": "string", "description": "The ID of the location."}, "accuracy": {"type": "number", "description": "The accuracy of the location fix in meters.", "format": "double"}}, "type": "object", "id": "Location", "description": "A geographic location that can be associated with a timeline item."}}, "ownerDomain": "google.com", "rootUrl": "https://www.googleapis.com/", "parameters": {"prettyPrint": {"default": "true", "type": "boolean", "description": "Returns response with indentations and line breaks.", "location": "query"}, "fields": {"type": "string", "description": "Selector specifying which fields to include in a partial response.", "location": "query"}, "quotaUser": {"type": "string", "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.", "location": "query"}, "oauth_token": {"type": "string", "description": "OAuth 2.0 token for the current user.", "location": "query"}, "key": {"type": "string", "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "location": "query"}, "userIp": {"type": "string", "description": "IP address of the site where the request originates. Use this if you want to enforce per-user limits.", "location": "query"}, "alt": {"description": "Data format for the response.", "default": "json", "enum": ["json"], "enumDescriptions": ["Responses with Content-Type of application/json"], "location": "query", "type": "string"}}, "title": "Google Mirror API", "baseUrl": "https://www.googleapis.com/mirror/v1/", "version": "v1", "servicePath": "mirror/v1/", "resources": {"timeline": {"methods": {"insert": {"description": "Inserts a new item into the timeline.", "supportsMediaUpload": true, "mediaUpload": {"maxSize": "10MB", "protocols": {"simple": {"path": "/upload/mirror/v1/timeline", "multipart": true}, "resumable": {"path": "/resumable/upload/mirror/v1/timeline", "multipart": true}}, "accept": ["audio/*", "image/*", "video/*"]}, "request": {"$ref": "TimelineItem"}, "id": "mirror.timeline.insert", "httpMethod": "POST", "path": "timeline", "response": {"$ref": "TimelineItem"}}, "get": {"description": "Gets a single timeline item by ID.", "parameters": {"id": {"required": true, "type": "string", "description": "The ID of the timeline item.", "location": "path"}}, "response": {"$ref": "TimelineItem"}, "httpMethod": "GET", "parameterOrder": ["id"], "path": "timeline/{id}", "id": "mirror.timeline.get"}, "list": {"description": "Retrieves a list of timeline items for the authenticated user.", "parameters": {"orderBy": {"enumDescriptions": ["Results will be ordered by displayTime (default). This is the same ordering as is used in the timeline on the device.", "Results will be ordered by the time at which they were last written to the data store."], "enum": ["displayTime", "writeTime"], "type": "string", "description": "Controls the order in which timeline items are returned.", "location": "query"}, "includeDeleted": {"type": "boolean", "description": "If true, tombstone records for deleted items will be returned.", "location": "query"}, "maxResults": {"location": "query", "type": "integer", "description": "The maximum number of items to include in the response, used for paging.", "format": "uint32"}, "pageToken": {"type": "string", "description": "Token for the page of results to return.", "location": "query"}, "sourceItemId": {"type": "string", "description": "If provided, only items with the given sourceItemId will be returned.", "location": "query"}, "pinnedOnly": {"type": "boolean", "description": "If true, only pinned items will be returned.", "location": "query"}, "bundleId": {"type": "string", "description": "If provided, only items with the given bundleId will be returned.", "location": "query"}}, "id": "mirror.timeline.list", "httpMethod": "GET", "path": "timeline", "response": {"$ref": "TimelineListResponse"}}, "update": {"description": "Updates a timeline item in place.", "parameters": {"id": {"required": true, "type": "string", "description": "The ID of the timeline item.", "location": "path"}}, "supportsMediaUpload": true, "mediaUpload": {"maxSize": "10MB", "protocols": {"simple": {"path": "/upload/mirror/v1/timeline/{id}", "multipart": true}, "resumable": {"path": "/resumable/upload/mirror/v1/timeline/{id}", "multipart": true}}, "accept": ["audio/*", "image/*", "video/*"]}, "request": {"$ref": "TimelineItem"}, "response": {"$ref": "TimelineItem"}, "httpMethod": "PUT", "parameterOrder": ["id"], "path": "timeline/{id}", "id": "mirror.timeline.update"}, "patch": {"description": "Updates a timeline item in place. This method supports patch semantics.", "parameters": {"id": {"required": true, "type": "string", "description": "The ID of the timeline item.", "location": "path"}}, "request": {"$ref": "TimelineItem"}, "response": {"$ref": "TimelineItem"}, "httpMethod": "PATCH", "parameterOrder": ["id"], "path": "timeline/{id}", "id": "mirror.timeline.patch"}, "delete": {"description": "Deletes a timeline item.", "parameters": {"id": {"required": true, "type": "string", "description": "The ID of the timeline item.", "location": "path"}}, "httpMethod": "DELETE", "parameterOrder": ["id"], "path": "timeline/{id}", "id": "mirror.timeline.delete"}}, "resources": {"attachments": {"methods": {"insert": {"description": "Adds a new attachment to a timeline item.", "parameters": {"itemId": {"required": true, "type": "string", "description": "The ID of the timeline item the attachment belongs to.", "location": "path"}}, "supportsMediaUpload": true, "mediaUpload": {"maxSize": "10MB", "protocols": {"simple": {"path": "/upload/mirror/v1/timeline/{itemId}/attachments", "multipart": true}, "resumable": {"path": "/resumable/upload/mirror/v1/timeline/{itemId}/attachments", "multipart": true}}, "accept": ["audio/*", "image/*", "video/*"]}, "response": {"$ref": "Attachment"}, "httpMethod": "POST", "parameterOrder": ["itemId"], "path": "timeline/{itemId}/attachments", "id": "mirror.timeline.attachments.insert"}, "get": {"description": "Retrieves an attachment on a timeline item by item ID and attachment ID.", "parameters": {"itemId": {"required": true, "type": "string", "description": "The ID of the timeline item the attachment belongs to.", "location": "path"}, "attachmentId": {"required": true, "type": "string", "description": "The ID of the attachment.", "location": "path"}}, "response": {"$ref": "Attachment"}, "httpMethod": "GET", "parameterOrder": ["itemId", "attachmentId"], "path": "timeline/{itemId}/attachments/{attachmentId}", "id": "mirror.timeline.attachments.get", "supportsMediaDownload": true}, "list": {"description": "Returns a list of attachments for a timeline item.", "parameters": {"itemId": {"required": true, "type": "string", "description": "The ID of the timeline item whose attachments should be listed.", "location": "path"}}, "response": {"$ref": "AttachmentsListResponse"}, "httpMethod": "GET", "parameterOrder": ["itemId"], "path": "timeline/{itemId}/attachments", "id": "mirror.timeline.attachments.list"}, "delete": {"description": "Deletes an attachment from a timeline item.", "parameters": {"itemId": {"required": true, "type": "string", "description": "The ID of the timeline item the attachment belongs to.", "location": "path"}, "attachmentId": {"required": true, "type": "string", "description": "The ID of the attachment.", "location": "path"}}, "httpMethod": "DELETE", "parameterOrder": ["itemId", "attachmentId"], "path": "timeline/{itemId}/attachments/{attachmentId}", "id": "mirror.timeline.attachments.delete"}}}}}, "subscriptions": {"methods": {"insert": {"description": "Creates a new subscription.", "request": {"$ref": "Subscription"}, "id": "mirror.subscriptions.insert", "httpMethod": "POST", "path": "subscriptions", "response": {"$ref": "Subscription"}}, "list": {"path": "subscriptions", "description": "Retrieves a list of subscriptions for the authenticated user and service.", "response": {"$ref": "SubscriptionsListResponse"}, "id": "mirror.subscriptions.list", "httpMethod": "GET"}, "update": {"description": "Updates an existing subscription in place.", "parameters": {"id": {"required": true, "type": "string", "description": "The ID of the subscription.", "location": "path"}}, "request": {"$ref": "Subscription"}, "response": {"$ref": "Subscription"}, "httpMethod": "PUT", "parameterOrder": ["id"], "path": "subscriptions/{id}", "id": "mirror.subscriptions.update"}, "delete": {"description": "Deletes a subscription.", "parameters": {"id": {"required": true, "type": "string", "description": "The ID of the subscription.", "location": "path"}}, "httpMethod": "DELETE", "parameterOrder": ["id"], "path": "subscriptions/{id}", "id": "mirror.subscriptions.delete"}}}, "locations": {"methods": {"list": {"path": "locations", "description": "Retrieves a list of locations for the user.", "response": {"$ref": "LocationsListResponse"}, "id": "mirror.locations.list", "httpMethod": "GET"}, "get": {"description": "Gets a single location by ID.", "parameters": {"id": {"required": true, "type": "string", "description": "The ID of the location or latest for the last known location.", "location": "path"}}, "response": {"$ref": "Location"}, "httpMethod": "GET", "parameterOrder": ["id"], "path": "locations/{id}", "id": "mirror.locations.get"}}}, "contacts": {"methods": {"insert": {"description": "Inserts a new contact.", "request": {"$ref": "Contact"}, "id": "mirror.contacts.insert", "httpMethod": "POST", "path": "contacts", "response": {"$ref": "Contact"}}, "get": {"description": "Gets a single contact by ID.", "parameters": {"id": {"required": true, "type": "string", "description": "The ID of the contact.", "location": "path"}}, "response": {"$ref": "Contact"}, "httpMethod": "GET", "parameterOrder": ["id"], "path": "contacts/{id}", "id": "mirror.contacts.get"}, "list": {"path": "contacts", "description": "Retrieves a list of contacts for the authenticated user.", "response": {"$ref": "ContactsListResponse"}, "id": "mirror.contacts.list", "httpMethod": "GET"}, "update": {"description": "Updates a contact in place.", "parameters": {"id": {"required": true, "type": "string", "description": "The ID of the contact.", "location": "path"}}, "request": {"$ref": "Contact"}, "response": {"$ref": "Contact"}, "httpMethod": "PUT", "parameterOrder": ["id"], "path": "contacts/{id}", "id": "mirror.contacts.update"}, "patch": {"description": "Updates a contact in place. This method supports patch semantics.", "parameters": {"id": {"required": true, "type": "string", "description": "The ID of the contact.", "location": "path"}}, "request": {"$ref": "Contact"}, "response": {"$ref": "Contact"}, "httpMethod": "PATCH", "parameterOrder": ["id"], "path": "contacts/{id}", "id": "mirror.contacts.patch"}, "delete": {"description": "Deletes a contact.", "parameters": {"id": {"required": true, "type": "string", "description": "The ID of the contact.", "location": "path"}}, "httpMethod": "DELETE", "parameterOrder": ["id"], "path": "contacts/{id}", "id": "mirror.contacts.delete"}}}}, "revision": 7, "description": "API for interacting with Glass users via the timeline.", "kind": "discovery#restDescription", "name": "mirror", "etag": "\"0kaFfN0xfjZjASExv-gUnrWhdto/BHW7XkhOzxDb1OPlEUumlLHFsO0\"", "basePath": "/mirror/v1/", "icons": {"x32": "http://www.google.com/images/icons/product/search-32.gif", "x16": "http://www.google.com/images/icons/product/search-16.gif"}, "discoveryVersion": "v1", "documentationLink": "https://developers.google.com/glass", "revision_date": "20130329"}